[{"ver":"0.1","info":{"id":"Ws3XWl","date":"1573688713","viewed":2791,"name":"Sphere FBM","username":"iq","description":"Carving a series of smooth sphere fields (a noise-like SDF made of a lattice of smooth spheres of random sizes) of higher frequencies and smaller sizes. Unlike simply doing an FBM displacement on a solid, this yields a distance field (bound).","likes":66,"published":3,"flags":0,"tags":[]},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\/\/ The MIT License\n\/\/ Copyright \u00a9 2019 Inigo Quilez\n\/\/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\/\/ Offseting an SDF with FBM produces beautiful results, but breaks\n\/\/ the metric of the field, resulting often in having to slow down\n\/\/ the marcher by decresing the step size.\n\/\/\n\/\/ Instead of using noise as basis for the FBM, this shader operates\n\/\/ by using a smooth but random distance fields as basis for the FBM.\n\/\/ The field is computer in each cell by placing a sphere of random\n\/\/ size in each corner and computing the smooth minimum.\n\/\/\n\/\/ The FBM combines multiple copies of this random field with incresing\n\/\/ frequencies and decreasing size as usual. Since the smooth field is \n\/\/ a distance bound and the FBM combines the fields with a bounded blend\n\/\/ operation, the resulting FBM is a bound SDF too, and doesn't need the\n\/\/ reduction in step size during marching. It also plays nicely with\n\/\/ shadows and occlusion techniques that are based on distances.\n\n\/\/ 0 = lattice\n\/\/ 1 = simplex\n#define NOISE 0\n\nfloat hash(vec3 p)  \/\/ replace this by something better\n{\n    p  = 17.0*fract( p*0.3183099+vec3(.11,.17,.13) );\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n\/\/ http:\/\/iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\/\/ http:\/\/iquilezles.org\/www\/articles\/smin\/smin.htm\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25\/k;\n}\n\n\/\/ http:\/\/iquilezles.org\/www\/articles\/smin\/smin.htm\nfloat smax( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*0.25\/k;\n}\n\n\/\/ http:\/\/iquilezles.org\/www\/articles\/boxfunctions\/boxfunctions.htm\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0\/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return vec2(-1.0);\n\treturn vec2( tN, tF );\n}\n\n\/\/---------------------------------------------------------------\n\/\/\n\/\/ A smooth but random SDF. For each cell, it places a sphere of\n\/\/ random size in each corner and computer the smooth minimum.\n\/\/\n\/\/---------------------------------------------------------------\n\nfloat noiseSDF( in vec3 p )\n{\n#if NOISE==0\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n\n    const float G1 = 0.30;\n    const float G2 = 0.75;\n    \n\t#define RAD(r) ((r)*(r)*G2)\n    #define SPH(i,f,c) length(f-c)-RAD(hash(i+c))\n    \n    return smin(smin(smin(SPH(i,f,vec3(0,0,0)),\n                          SPH(i,f,vec3(0,0,1)),G1),\n                     smin(SPH(i,f,vec3(0,1,0)),\n                          SPH(i,f,vec3(0,1,1)),G1),G1),\n                smin(smin(SPH(i,f,vec3(1,0,0)),\n                          SPH(i,f,vec3(1,0,1)),G1),\n                     smin(SPH(i,f,vec3(1,1,0)),\n                          SPH(i,f,vec3(1,1,1)),G1),G1),G1);\n#else\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    vec3 e = step(d0.yzx, d0);\n\tvec3 i1 = e*(1.0-e.zxy);\n\tvec3 i2 = 1.0-e.zxy*(1.0-e);\n    \n    vec3 d1 = d0 - (i1  - 1.0*K2);\n    vec3 d2 = d0 - (i2  - 2.0*K2);\n    vec3 d3 = d0 - (1.0 - 3.0*K2);\n    \n    float r0 = hash( i+0.0 );\n    float r1 = hash( i+i1 );\n    float r2 = hash( i+i2 );\n    float r3 = hash( i+1.0 );\n\n    const float G1 = 0.20;\n    const float G2 = 0.50;\n\n    #define SPH(d,r) length(d)-r*r*G2\n\n    return smin( smin(SPH(d0,r0),\n                      SPH(d1,r1),G1),\n                 smin(SPH(d2,r2),\n                      SPH(d3,r3),G1),G1);\n#endif\n}\n\n\/\/ rotation matrix\nconst mat3 m = mat3( 0.00,  0.80,  0.60, -0.80,  0.36, -0.48, -0.60, -0.48,  0.64 );\n\nvec2 map( in vec3 p )\n{\n    \/\/ box\n    float d = sdBox( p, vec3(1.0) );\n\n    p += 0.5;\n\n    \/\/ fbm\n    float t = 0.0;\n\tfloat s = 1.0;\n    for( int i=0; i<6; i++ )\n    {\n    \td = smax( d, -noiseSDF(p)*s, 0.2*s );\n        t += d;\n        p = 2.01*m*p; \/\/ next octave\n        s = 0.50*s;\n    }\n    t = 1.0+t*2.0; t = t*t;\n    \n    return vec2(d,t);\n}\n\nconst float precis = 0.0005;\n\nvec2 interesect( in vec3 ro, in vec3 rd )\n{\n\tvec2 res = vec2(-1.0);\n\n    \/\/ bounding volume    \n    vec2 dis = iBox( ro, rd, vec3(1.0) ) ;\n    if( dis.y<0.0 ) return res;\n\n    \/\/ raymarch\n    float tmax = dis.y;\n    float t = dis.x;\n\tfor( int i=0; i<256; i++ )\n\t{\n        vec3 pos = ro + t*rd;\n\t\tvec2 h = map( pos );\n        res.x = t;\n        res.y = h.y;\n        \n\t\tif( h.x<precis || t>tmax ) break;\n\t\tt += h.x;\n\t}\n\n\tif( t>tmax ) res = vec2(-1.0);\n\treturn res;\n}\n\n\/\/ http:\/\/iquilezles.org\/www\/articles\/normalsSDF\/normalsSDF.htm\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*precis;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\n\/\/ http:\/\/iquilezles.org\/www\/articles\/rmshadows\/rmshadows.htm\nfloat calcSoftShadow(vec3 ro, vec3 rd, float tmin, float tmax, float w)\n{\n    \n    \/\/ bounding volume    \n    vec2 dis = iBox( ro, rd, vec3(1.0) ) ;\n    if( dis.y<0.0 ) return 1.0;\n    \n    tmin = max(tmin,dis.x);\n\ttmax = min(tmax,dis.y);\n    \n    float t = tmin;\n    float res = 1.0;\n    for( int i=0; i<256; i++ )\n    {\n     \tfloat h = map(ro + t*rd).x;\n        res = min( res, h\/(w*t) );\n    \tt += clamp(h, 0.005, 0.50);\n        if( res<-1.0 || t>tmax ) break;\n    }\n    res = max(res,-1.0); \/\/ clamp to [-1,1]\n\n    return 0.25*(1.0+res)*(1.0+res)*(2.0-res); \/\/ smoothstep\n}\n\n\/\/ fibonazzi points in s aphsre: http:\/\/lgdv.cs.fau.de\/uploads\/publications\/spherical_fibonacci_mapping_opt.pdf\nvec3 forwardSF( float i, float n) \n{\n    const float PI  = 3.141592653589793238;\n    const float PHI = 1.618033988749894848;\n    float phi = 2.0*PI*fract(i\/PHI);\n    float zi = 1.0 - (2.0*i+1.0)\/n;\n    float sinTheta = sqrt( 1.0 - zi*zi);\n    return vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, zi);\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2   \/\/ make this 2 or 3 for antialiasing\n#endif\n\n\n#define ZERO min(iFrame,0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        \/\/ pixel coordinates\n        vec2 o = vec2(float(m),float(n)) \/ float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)\/iResolution.y;\n        float d = 0.5*sin(fragCoord.x*147.0)*sin(fragCoord.y*131.0);\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)\/iResolution.y;\n        #endif\n   \n        \/\/ camera anim\n        float an = -0.1*iTime;\n        vec3 ro = 4.0*vec3( cos(an), 0.4, sin(an) );\n        vec3 ta = vec3( 0.0, -0.35, 0.0 );\n\n        \/\/ camera matrix\t\n        vec3  cw = normalize( ta-ro );\n        vec3  cu = normalize( cross(cw,vec3(0.0,1.0,0.0)) );\n        vec3  cv = normalize( cross(cu,cw) );\n        vec3  rd = normalize( p.x*cu + p.y*cv + 2.7*cw );\n\n        \/\/ render\n        vec3 col = vec3(0.01);\n        vec2 tm = interesect( ro, rd );\n        float t = tm.x;\n        if( t>0.0 )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal( pos );\n            float occ = tm.y*tm.y;\n\n            \/\/ material\n            vec3 mate = mix( vec3(0.6,0.3,0.1), vec3(1), tm.y )*0.7;\n\n            \/\/ lighting\n            vec3 lig = normalize(vec3(1.0,0.5,0.6));\n            float dif = clamp(dot(lig,nor),0.0,1.0);\n            dif *= calcSoftShadow(pos+nor*0.001,lig,0.001,10.0,0.003);\n\n            vec3 hal = normalize(lig-rd);\n            float spe = clamp(dot(hal,nor),0.0,1.0);\n            spe = pow(spe,4.0)*dif*(0.04+0.96*pow(max(1.0-dot(hal,lig),0.0),5.0));\n\n            col = vec3(0.0);\n            col += mate*1.5*vec3(1.30,0.85,0.75)*dif;\n            col +=      9.0*spe;\n            col += mate*0.3*vec3(0.40,0.45,0.60)*occ*(0.6+0.4*nor.y);\n        }\n\n        \/\/ gamma\n        tot += pow(col,vec3(0.4545));\n\t#if AA>1\n    }\n    tot \/= float(AA*AA);\n    #endif\n\n    \/\/ vignetting\n    vec2 q = fragCoord\/iResolution.xy;\n    tot *= 0.7 + 0.3*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n    \n    \/\/ cheap dithering\n    tot += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)\/512.0;\n\n    fragColor=vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}]