[{"ver":"0.1","info":{"id":"4df3Rn","date":"1358124981","viewed":13719,"name":"Mandelbrot - smooth","username":"iq","description":"A zoom in the Mandelbrot set, that showcases the difference between the regular iteration count coloring and the smooth iteration count coloring. See here: [url]http:\/\/iquilezles.org\/www\/articles\/mset_smooth\/mset_smooth.htm[\/url]","likes":65,"published":3,"flags":0,"tags":[]},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n\/\/ See here for more information on smooth iteration count:\n\/\/\n\/\/ http:\/\/iquilezles.org\/www\/articles\/mset_smooth\/mset_smooth.htm\n\n\n\/\/ increase this if you have a very fast GPU\n#define AA 2\n\n\n\n\nfloat mandelbrot( in vec2 c )\n{\n    #if 1\n    {\n        float c2 = dot(c, c);\n        \/\/ skip computation inside M1 - http:\/\/iquilezles.org\/www\/articles\/mset_1bulb\/mset1bulb.htm\n        if( 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0 < 0.0 ) return 0.0;\n        \/\/ skip computation inside M2 - http:\/\/iquilezles.org\/www\/articles\/mset_2bulb\/mset2bulb.htm\n        if( 16.0*(c2+2.0*c.x+1.0) - 1.0 < 0.0 ) return 0.0;\n    }\n    #endif\n\n\n    const float B = 256.0;\n    float l = 0.0;\n    vec2 z  = vec2(0.0);\n    for( int i=0; i<512; i++ )\n    {\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n        if( dot(z,z)>(B*B) ) break;\n        l += 1.0;\n    }\n\n    if( l>511.0 ) return 0.0;\n    \n    \/\/ ------------------------------------------------------\n    \/\/ smooth interation count\n    \/\/float sl = l - log(log(length(z))\/log(B))\/log(2.0);\n\n    \/\/ equivalent optimized smooth interation count\n    float sl = l - log2(log2(dot(z,z))) + 4.0;\n\n    float al = smoothstep( -0.1, 0.0, sin(0.5*6.2831*iTime ) );\n    l = mix( l, sl, al );\n\n    return l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord.xy+vec2(float(m),float(n))\/float(AA)))\/iResolution.y;\n        float w = float(AA*m+n);\n        float time = iTime + 0.5*(1.0\/24.0)*w\/float(AA*AA);\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)\/iResolution.y;\n        float time = iTime;\n#endif\n    \n        float zoo = 0.62 + 0.38*cos(.07*time);\n        float coa = cos( 0.15*(1.0-zoo)*time );\n        float sia = sin( 0.15*(1.0-zoo)*time );\n        zoo = pow( zoo,8.0);\n        vec2 xy = vec2( p.x*coa-p.y*sia, p.x*sia+p.y*coa);\n        vec2 c = vec2(-.745,.186) + xy*zoo;\n\n        float l = mandelbrot(c);\n\n        col += 0.5 + 0.5*cos( 3.0 + l*0.15 + vec3(0.0,0.6,1.0));\n#if AA>1\n    }\n    col \/= float(AA*AA);\n#endif\n\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}]