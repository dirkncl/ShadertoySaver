[{"ver":"0.1","info":{"id":"Xsl3zn","date":"1361923265","viewed":7101,"name":"Warping - texture","username":"iq","description":"Using a texture's range to deform its own domain","likes":39,"published":3,"flags":0,"tags":[]},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":".\/media\/a\/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":".\/media\/ap\/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ make 1 to see a procedural warp\/deformation\n#define PROCEDURAL 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord\/iResolution.xy;\n\n#if PROCEDURAL==0\n    vec2 warp = texture( iChannel0, uv*0.1 + iTime*vec2(0.04,0.03) ).xz;\n#else    \n    float freq = 3.0*sin(0.5*iTime);\n    vec2 warp = 0.5000*cos( uv.xy*1.0*freq + vec2(0.0,1.0) + iTime ) +\n                0.2500*cos( uv.yx*2.3*freq + vec2(1.0,2.0) + iTime) +\n                0.1250*cos( uv.xy*4.1*freq + vec2(5.0,3.0) + iTime ) +\n                0.0625*cos( uv.yx*7.9*freq + vec2(3.0,4.0) + iTime );\n#endif\n    \n\tvec2 st = uv + warp*0.5;\n\n\tfragColor = vec4( texture( iChannel0, st ).xyz, 1.0 );\n}","name":"Image","description":"","type":"image"}]}]